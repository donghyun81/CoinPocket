// Generated by Dagger (https://dagger.dev).
package com.example.coinpocket.di;

import com.example.coinpocket.data.local.CoinPocketDatabase;
import com.example.coinpocket.domain.repository.CoinRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideCoinRepositoryFactory implements Factory<CoinRepository> {
  private final Provider<CoinPocketDatabase> dbProvider;

  public AppModule_ProvideCoinRepositoryFactory(Provider<CoinPocketDatabase> dbProvider) {
    this.dbProvider = dbProvider;
  }

  @Override
  public CoinRepository get() {
    return provideCoinRepository(dbProvider.get());
  }

  public static AppModule_ProvideCoinRepositoryFactory create(
      Provider<CoinPocketDatabase> dbProvider) {
    return new AppModule_ProvideCoinRepositoryFactory(dbProvider);
  }

  public static CoinRepository provideCoinRepository(CoinPocketDatabase db) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideCoinRepository(db));
  }
}
